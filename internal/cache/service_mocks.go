// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=service_mocks.go -package=cache
//
// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	models "jeevan/jobportal/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCaching is a mock of Caching interface.
type MockCaching struct {
	ctrl     *gomock.Controller
	recorder *MockCachingMockRecorder
}

// MockCachingMockRecorder is the mock recorder for MockCaching.
type MockCachingMockRecorder struct {
	mock *MockCaching
}

// NewMockCaching creates a new mock instance.
func NewMockCaching(ctrl *gomock.Controller) *MockCaching {
	mock := &MockCaching{ctrl: ctrl}
	mock.recorder = &MockCachingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaching) EXPECT() *MockCachingMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockCaching) AddToCache(ctx context.Context, jid uint, jdata models.Jobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCache", ctx, jid, jdata)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockCachingMockRecorder) AddToCache(ctx, jid, jdata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockCaching)(nil).AddToCache), ctx, jid, jdata)
}

// AddToCacheRedis mocks base method.
func (m *MockCaching) AddToCacheRedis(ctx context.Context, emailKey, otpValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCacheRedis", ctx, emailKey, otpValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCacheRedis indicates an expected call of AddToCacheRedis.
func (mr *MockCachingMockRecorder) AddToCacheRedis(ctx, emailKey, otpValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCacheRedis", reflect.TypeOf((*MockCaching)(nil).AddToCacheRedis), ctx, emailKey, otpValue)
}

// CheckCacheOtp mocks base method.
func (m *MockCaching) CheckCacheOtp(ctx context.Context, emailKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCacheOtp", ctx, emailKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCacheOtp indicates an expected call of CheckCacheOtp.
func (mr *MockCachingMockRecorder) CheckCacheOtp(ctx, emailKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCacheOtp", reflect.TypeOf((*MockCaching)(nil).CheckCacheOtp), ctx, emailKey)
}

// GetCahceData mocks base method.
func (m *MockCaching) GetCahceData(ctx context.Context, jid uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCahceData", ctx, jid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCahceData indicates an expected call of GetCahceData.
func (mr *MockCachingMockRecorder) GetCahceData(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCahceData", reflect.TypeOf((*MockCaching)(nil).GetCahceData), ctx, jid)
}
