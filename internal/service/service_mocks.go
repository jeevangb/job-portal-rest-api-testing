// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mocks.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "jeevan/jobportal/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddCompanyDetails mocks base method.
func (m *MockUserService) AddCompanyDetails(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompanyDetails", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCompanyDetails indicates an expected call of AddCompanyDetails.
func (mr *MockUserServiceMockRecorder) AddCompanyDetails(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompanyDetails", reflect.TypeOf((*MockUserService)(nil).AddCompanyDetails), ctx, companyData)
}

// AddJobDetails mocks base method.
func (m *MockUserService) AddJobDetails(ctx context.Context, jobData models.Hr, cid uint64) (models.ResponseJobId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobDetails", ctx, jobData, cid)
	ret0, _ := ret[0].(models.ResponseJobId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJobDetails indicates an expected call of AddJobDetails.
func (mr *MockUserServiceMockRecorder) AddJobDetails(ctx, jobData, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobDetails", reflect.TypeOf((*MockUserService)(nil).AddJobDetails), ctx, jobData, cid)
}

// FilterJob mocks base method.
func (m *MockUserService) FilterJob(ctx context.Context, jobApplication []models.RespondJobApplicant) ([]models.RespondJobApplicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterJob", ctx, jobApplication)
	ret0, _ := ret[0].([]models.RespondJobApplicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterJob indicates an expected call of FilterJob.
func (mr *MockUserServiceMockRecorder) FilterJob(ctx, jobApplication any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterJob", reflect.TypeOf((*MockUserService)(nil).FilterJob), ctx, jobApplication)
}

// UserLogin mocks base method.
func (m *MockUserService) UserLogin(ctx context.Context, userData models.NewUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserServiceMockRecorder) UserLogin(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserService)(nil).UserLogin), ctx, userData)
}

// UserSignup mocks base method.
func (m *MockUserService) UserSignup(ctx context.Context, userData models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserServiceMockRecorder) UserSignup(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserService)(nil).UserSignup), ctx, userData)
}

// ViewAllCompanies mocks base method.
func (m *MockUserService) ViewAllCompanies(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCompanies", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCompanies indicates an expected call of ViewAllCompanies.
func (mr *MockUserServiceMockRecorder) ViewAllCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCompanies", reflect.TypeOf((*MockUserService)(nil).ViewAllCompanies), ctx)
}

// ViewAllJobs mocks base method.
func (m *MockUserService) ViewAllJobs(ctx context.Context) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllJobs", ctx)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllJobs indicates an expected call of ViewAllJobs.
func (mr *MockUserServiceMockRecorder) ViewAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllJobs", reflect.TypeOf((*MockUserService)(nil).ViewAllJobs), ctx)
}

// ViewCompanyById mocks base method.
func (m *MockUserService) ViewCompanyById(ctx context.Context, cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanyById", ctx, cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanyById indicates an expected call of ViewCompanyById.
func (mr *MockUserServiceMockRecorder) ViewCompanyById(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanyById", reflect.TypeOf((*MockUserService)(nil).ViewCompanyById), ctx, cid)
}

// ViewJobByCid mocks base method.
func (m *MockUserService) ViewJobByCid(ctx context.Context, cid uint64) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobByCid", ctx, cid)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobByCid indicates an expected call of ViewJobByCid.
func (mr *MockUserServiceMockRecorder) ViewJobByCid(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobByCid", reflect.TypeOf((*MockUserService)(nil).ViewJobByCid), ctx, cid)
}

// ViewJobById mocks base method.
func (m *MockUserService) ViewJobById(ctx context.Context, jid uint64) (models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobById", ctx, jid)
	ret0, _ := ret[0].(models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobById indicates an expected call of ViewJobById.
func (mr *MockUserServiceMockRecorder) ViewJobById(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobById", reflect.TypeOf((*MockUserService)(nil).ViewJobById), ctx, jid)
}
